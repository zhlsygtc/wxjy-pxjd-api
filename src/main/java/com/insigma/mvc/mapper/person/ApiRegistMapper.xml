<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.insigma.mvc.dao.person.ApiRegistMapper">
	<!-- 根据用户名查询用户 -->
    <select id="getSUserByUsername" parameterType="String" resultType="SUser" >
    select 
	    a.userid
	from s_user a
	where a.username=#{username}
	</select>

	<!-- 根据用户ID查询用户-->
    <select id="getSUserByUserId" parameterType="String" resultType="SUser" >
    select 
	    userid,username,password,usertype,email,mobile,logintimes,
	    to_char(lastlogintime,'yyyy-mm-dd hh24:mi:ss') as lastlogintime,
	    lastloginip,enabled,baseinfoid,isblacklist,reason,registtime,openid,ismainaccount
	from s_user a
	where a.userid=#{userid}
	</select>
	
	<!-- 新增账号信息 -->
	<insert id="addSUser"  parameterType="SUser">
	    <selectKey resultType="java.lang.String" order="BEFORE" keyProperty="userid">
			SELECT sys_guid() from dual 
		</selectKey>
		insert into s_user(userid,username,password,usertype,baseinfoid,mobile,logintimes,enabled,isblacklist,registtime,fromaddr,ismainaccount)
		values (#{userid},#{username},#{password},#{usertype},#{baseinfoid},#{mobile},#{logintimes},#{enabled},#{isblacklist},sysdate,#{fromaddr},#{ismainaccount})
	</insert>

	<!-- 新增账号机构关联信息 -->
	<insert id="addSUserGroup"  parameterType="SUserGroupRef">
		<selectKey resultType="java.lang.String" order="BEFORE" keyProperty="usergroupid">
			SELECT sys_guid() from dual
		</selectKey>
		insert into s_usergroupref (USERGROUPID,USERID,GROUPID)
		values (#{usergroupid},#{userid},#{groupid})
	</insert>
	
	<!-- 根据角色编码获取角色信息 -->
    <select id="getSRoleByCode" parameterType="String" resultType="SRole" >
    select 
	    a.roleid,
	    a.rolecode,
	    a.rolename
	from s_role a
	where a.rolecode=#{rolecode}
	</select>
	
	<!-- 给用户添加角色信息 -->
	<insert id="addSUserRole"  parameterType="SUserRole">
		insert into s_user_role(id,userid,roleid)
		values (sys_guid(),#{userid},#{roleid})
	</insert>

	<!-- 通过用户id删除用户与角色关联信息 -->
	<delete id="deleteSUserRoleByUserIdAndRolecode" parameterType="hashmap">
		DELETE FROM S_USER_ROLE T
		WHERE T.ROLEID = (SELECT ROLEID FROM S_ROLE WHERE ROLECODE = #{rolecode})
		AND T.USERID = #{userid}
	</delete>

	<!-- 通过用户id批量删除用户与角色关联信息 -->
	<delete id="deleteSUserRoleByUserIdsAndRolecode" parameterType="hashmap" >
        DELETE FROM S_USER_ROLE T
		WHERE T.ROLEID = (SELECT ROLEID FROM S_ROLE WHERE ROLECODE = #{rolecode})
		AND T.USERID IN
		<foreach item="ids" collection="ids" open="(" separator="," close=")">
			#{ids}
		</foreach>
	</delete>

    <!-- 通过用户id删除用户 -->
    <delete id="deleteSUserByUserId" parameterType="java.lang.String">
        DELETE FROM S_USER T
        WHERE T.USERID = #{userid}
    </delete>

    <!-- 通过用户id批量删除用户 -->
    <delete id="deleteSUserByUserIds" parameterType="java.lang.String">
        DELETE FROM S_USER T
        WHERE T.USERID IN
        <foreach item="ids" collection="array" open="(" separator="," close=")">
            #{ids}
        </foreach>
    </delete>
</mapper>